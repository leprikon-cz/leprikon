/* tslint:disable */
/* eslint-disable */
/**
 * Leprikon API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Credentials
 */
export interface Credentials {
    /**
     * 
     * @type {string}
     * @memberof Credentials
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Credentials
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SchoolYear
 */
export interface SchoolYear {
    /**
     * 
     * @type {number}
     * @memberof SchoolYear
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof SchoolYear
     */
    'name': string;
    /**
     * Pouze první ze dvou roků.
     * @type {number}
     * @memberof SchoolYear
     */
    'year': number;
    /**
     * 
     * @type {boolean}
     * @memberof SchoolYear
     */
    'active'?: boolean;
}
/**
 * 
 * @export
 * @interface SetSchoolYear
 */
export interface SetSchoolYear {
    /**
     * 
     * @type {number}
     * @memberof SetSchoolYear
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * Požadováno. 150 znaků nebo méně. Pouze písmena, číslice a znaky @/./+/-/_.
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
}

/**
 * LeprikonApi - axios parameter creator
 * @export
 */
export const LeprikonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SetSchoolYear} setSchoolYear 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolyearCurrentCreate: async (setSchoolYear: SetSchoolYear, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setSchoolYear' is not null or undefined
            assertParamExists('schoolyearCurrentCreate', 'setSchoolYear', setSchoolYear)
            const localVarPath = `/api/schoolyear/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setSchoolYear, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolyearCurrentRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schoolyear/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolyearList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schoolyear`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this školní rok.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolyearRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('schoolyearRetrieve', 'id', id)
            const localVarPath = `/api/schoolyear/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Credentials} credentials 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin: async (credentials: Credentials, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'credentials' is not null or undefined
            assertParamExists('userLogin', 'credentials', credentials)
            const localVarPath = `/api/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(credentials, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userMeRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeprikonApi - functional programming interface
 * @export
 */
export const LeprikonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeprikonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SetSchoolYear} setSchoolYear 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolyearCurrentCreate(setSchoolYear: SetSchoolYear, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolyearCurrentCreate(setSchoolYear, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolyearCurrentRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolYear>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolyearCurrentRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolyearList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SchoolYear>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolyearList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this školní rok.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolyearRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolYear>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolyearRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Credentials} credentials 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogin(credentials: Credentials, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogin(credentials, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userMeRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userMeRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeprikonApi - factory interface
 * @export
 */
export const LeprikonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeprikonApiFp(configuration)
    return {
        /**
         * 
         * @param {SetSchoolYear} setSchoolYear 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolyearCurrentCreate(setSchoolYear: SetSchoolYear, options?: any): AxiosPromise<void> {
            return localVarFp.schoolyearCurrentCreate(setSchoolYear, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolyearCurrentRetrieve(options?: any): AxiosPromise<SchoolYear> {
            return localVarFp.schoolyearCurrentRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolyearList(options?: any): AxiosPromise<Array<SchoolYear>> {
            return localVarFp.schoolyearList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this školní rok.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolyearRetrieve(id: number, options?: any): AxiosPromise<SchoolYear> {
            return localVarFp.schoolyearRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Credentials} credentials 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin(credentials: Credentials, options?: any): AxiosPromise<User> {
            return localVarFp.userLogin(credentials, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout(options?: any): AxiosPromise<void> {
            return localVarFp.userLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userMeRetrieve(options?: any): AxiosPromise<User> {
            return localVarFp.userMeRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeprikonApi - interface
 * @export
 * @interface LeprikonApi
 */
export interface LeprikonApiInterface {
    /**
     * 
     * @param {SetSchoolYear} setSchoolYear 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApiInterface
     */
    schoolyearCurrentCreate(setSchoolYear: SetSchoolYear, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApiInterface
     */
    schoolyearCurrentRetrieve(options?: AxiosRequestConfig): AxiosPromise<SchoolYear>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApiInterface
     */
    schoolyearList(options?: AxiosRequestConfig): AxiosPromise<Array<SchoolYear>>;

    /**
     * 
     * @param {number} id A unique integer value identifying this školní rok.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApiInterface
     */
    schoolyearRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<SchoolYear>;

    /**
     * 
     * @param {Credentials} credentials 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApiInterface
     */
    userLogin(credentials: Credentials, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApiInterface
     */
    userLogout(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApiInterface
     */
    userMeRetrieve(options?: AxiosRequestConfig): AxiosPromise<User>;

}

/**
 * LeprikonApi - object-oriented interface
 * @export
 * @class LeprikonApi
 * @extends {BaseAPI}
 */
export class LeprikonApi extends BaseAPI implements LeprikonApiInterface {
    /**
     * 
     * @param {SetSchoolYear} setSchoolYear 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApi
     */
    public schoolyearCurrentCreate(setSchoolYear: SetSchoolYear, options?: AxiosRequestConfig) {
        return LeprikonApiFp(this.configuration).schoolyearCurrentCreate(setSchoolYear, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApi
     */
    public schoolyearCurrentRetrieve(options?: AxiosRequestConfig) {
        return LeprikonApiFp(this.configuration).schoolyearCurrentRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApi
     */
    public schoolyearList(options?: AxiosRequestConfig) {
        return LeprikonApiFp(this.configuration).schoolyearList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this školní rok.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApi
     */
    public schoolyearRetrieve(id: number, options?: AxiosRequestConfig) {
        return LeprikonApiFp(this.configuration).schoolyearRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Credentials} credentials 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApi
     */
    public userLogin(credentials: Credentials, options?: AxiosRequestConfig) {
        return LeprikonApiFp(this.configuration).userLogin(credentials, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApi
     */
    public userLogout(options?: AxiosRequestConfig) {
        return LeprikonApiFp(this.configuration).userLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeprikonApi
     */
    public userMeRetrieve(options?: AxiosRequestConfig) {
        return LeprikonApiFp(this.configuration).userMeRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}


