# -*- coding: utf-8 -*-
# Generated by Django 1.9.9 on 2017-01-13 19:25
from __future__ import unicode_literals

import cms.models.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import djangocms_text_ckeditor.fields
import filer.fields.file
import filer.fields.image
import leprikon.models.courses
import leprikon.models.fields
import leprikon.models.startend


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cms', '0001_initial'),
        ('filer', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AgeGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('order', models.IntegerField(blank=True, default=0, verbose_name='order')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'age group',
                'verbose_name_plural': 'age groups',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_type', models.CharField(choices=[('email', 'email'), ('phone', 'phone'), ('url', 'url')], max_length=30, verbose_name='contact type')),
                ('contact', models.CharField(max_length=250, verbose_name='contact')),
                ('order', models.IntegerField(blank=True, default=0, verbose_name='order')),
                ('public', models.BooleanField(default=False, verbose_name='public')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'contact',
                'verbose_name_plural': 'contacts',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('description', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='', verbose_name='description')),
                ('price', leprikon.models.fields.PriceField(blank=True, decimal_places=0, max_digits=10, null=True, verbose_name='price')),
                ('unit', models.CharField(max_length=150, verbose_name='unit')),
                ('public', models.BooleanField(default=False, verbose_name='public')),
                ('reg_active', models.BooleanField(default=False, verbose_name='active registration')),
                ('min_count', models.IntegerField(blank=True, null=True, verbose_name='minimal count')),
                ('max_count', models.IntegerField(blank=True, null=True, verbose_name='maximal count')),
                ('risks', djangocms_text_ckeditor.fields.HTMLField(blank=True, verbose_name='risks')),
                ('plan', djangocms_text_ckeditor.fields.HTMLField(blank=True, verbose_name='plan')),
                ('evaluation', djangocms_text_ckeditor.fields.HTMLField(blank=True, verbose_name='evaluation')),
                ('note', models.CharField(blank=True, default='', max_length=300, verbose_name='note')),
                ('age_groups', models.ManyToManyField(blank=True, related_name='courses', to='leprikon.AgeGroup', verbose_name='age groups')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
            },
        ),
        migrations.CreateModel(
            name='CourseAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(blank=True, default=0, verbose_name='order')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='leprikon.Course', verbose_name='course')),
                ('file', filer.fields.file.FilerFileField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='filer.File')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'attachment',
                'verbose_name_plural': 'attachments',
            },
        ),
        migrations.CreateModel(
            name='CourseGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('plural', models.CharField(max_length=150, verbose_name='plural')),
                ('color', leprikon.models.fields.ColorField(max_length=10, verbose_name='color')),
                ('order', models.IntegerField(blank=True, default=0, verbose_name='order')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'course group',
                'verbose_name_plural': 'course groups',
            },
        ),
        migrations.CreateModel(
            name='CourseJournalEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='date')),
                ('start', models.TimeField(blank=True, help_text='Leave empty, if the course does not take place', null=True, verbose_name='start time')),
                ('end', models.TimeField(blank=True, help_text='Leave empty, if the course does not take place', null=True, verbose_name='end time')),
                ('agenda', djangocms_text_ckeditor.fields.HTMLField(default=leprikon.models.courses.get_default_agenda, verbose_name='session agenda')),
                ('course', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='journal_entries', to='leprikon.Course', verbose_name='course')),
            ],
            options={
                'ordering': ('date', 'start', 'end'),
                'verbose_name': 'journal entry',
                'verbose_name_plural': 'journal entries',
            },
            bases=(leprikon.models.startend.StartEndMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CourseJournalLeaderEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.TimeField(verbose_name='start time')),
                ('end', models.TimeField(verbose_name='end time')),
                ('course_entry', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='leader_entries', to='leprikon.CourseJournalEntry', verbose_name='course journal entry')),
            ],
            options={
                'verbose_name': 'course journal leader entry',
                'verbose_name_plural': 'course journal leader entries',
            },
            bases=(leprikon.models.startend.StartEndMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CourseListPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='leprikon_courselistplugin', serialize=False, to='cms.CMSPlugin')),
                ('template', models.CharField(choices=[('default', 'Default'), ('grouped', 'Grouped by course groups')], default='default', help_text='The template used to render plugin.', max_length=100, verbose_name='template')),
                ('age_groups', models.ManyToManyField(blank=True, help_text='Keep empty to skip searching by age groups.', to='leprikon.AgeGroup', verbose_name='age groups')),
            ],
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='CoursePayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='payment date')),
                ('amount', leprikon.models.fields.PriceField(decimal_places=0, max_digits=10, verbose_name='amount')),
            ],
            options={
                'verbose_name': 'course payment',
                'verbose_name_plural': 'course payments',
            },
        ),
        migrations.CreateModel(
            name='CoursePeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('start', models.DateField(verbose_name='start date')),
                ('end', models.DateField(verbose_name='end date')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='periods', to='leprikon.Course', verbose_name='course')),
            ],
            options={
                'ordering': ('course__name', 'start'),
                'verbose_name': 'period',
                'verbose_name_plural': 'periods',
            },
            bases=(leprikon.models.startend.StartEndMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CoursePlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='leprikon_courseplugin', serialize=False, to='cms.CMSPlugin')),
                ('template', models.CharField(choices=[('default', 'Default')], default='default', help_text='The template used to render plugin.', max_length=100, verbose_name='template')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leprikon.Course', verbose_name='course')),
            ],
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='CourseRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(editable=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='time of registration')),
                ('price', leprikon.models.fields.PriceField(decimal_places=0, editable=False, max_digits=10, verbose_name='price')),
                ('answers', models.TextField(blank=True, default='{}', editable=False, verbose_name='additional answers')),
                ('cancel_request', models.BooleanField(default=False, verbose_name='cancel request')),
                ('canceled', models.DateField(blank=True, null=True, verbose_name='date of cancellation')),
                ('participant_gender', models.CharField(choices=[('m', 'male'), ('f', 'female')], editable=False, max_length=1, verbose_name='gender')),
                ('participant_first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('participant_last_name', models.CharField(max_length=30, verbose_name='last name')),
                ('participant_birth_num', leprikon.models.fields.BirthNumberField(verbose_name='birth number')),
                ('participant_street', models.CharField(max_length=150, verbose_name='street')),
                ('participant_city', models.CharField(max_length=150, verbose_name='city')),
                ('participant_postal_code', leprikon.models.fields.PostalCodeField(verbose_name='postal code')),
                ('participant_citizenship', django_countries.fields.CountryField(max_length=2, verbose_name='citizenship')),
                ('participant_phone', models.CharField(blank=True, default='', max_length=30, verbose_name='phone')),
                ('participant_email', models.EmailField(blank=True, default='', max_length=254, verbose_name='email address')),
                ('participant_school_other', models.CharField(blank=True, default='', max_length=150, verbose_name='other school')),
                ('participant_school_class', models.CharField(blank=True, default='', max_length=30, verbose_name='class')),
                ('participant_health', models.TextField(blank=True, default='', verbose_name='health')),
                ('has_parent1', models.BooleanField(default=False, verbose_name='first parent')),
                ('parent1_first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='first name')),
                ('parent1_last_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='last name')),
                ('parent1_street', models.CharField(blank=True, max_length=150, null=True, verbose_name='street')),
                ('parent1_city', models.CharField(blank=True, max_length=150, null=True, verbose_name='city')),
                ('parent1_postal_code', leprikon.models.fields.PostalCodeField(blank=True, null=True, verbose_name='postal code')),
                ('parent1_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='phone')),
                ('parent1_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address')),
                ('has_parent2', models.BooleanField(default=False, verbose_name='second parent')),
                ('parent2_first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='first name')),
                ('parent2_last_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='last name')),
                ('parent2_street', models.CharField(blank=True, max_length=150, null=True, verbose_name='street')),
                ('parent2_city', models.CharField(blank=True, max_length=150, null=True, verbose_name='city')),
                ('parent2_postal_code', leprikon.models.fields.PostalCodeField(blank=True, null=True, verbose_name='postal code')),
                ('parent2_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='phone')),
                ('parent2_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='leprikon.Course', verbose_name='course')),
                ('participant_age_group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='leprikon.AgeGroup', verbose_name='age group')),
            ],
            options={
                'verbose_name': 'course registration',
                'verbose_name_plural': 'course registrations',
            },
        ),
        migrations.CreateModel(
            name='CourseRegistrationDiscount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discount', leprikon.models.fields.PriceField(decimal_places=0, default=0, max_digits=10, verbose_name='discount')),
                ('explanation', models.CharField(blank=True, default='', max_length=250, verbose_name='discount explanation')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discounts', to='leprikon.CoursePeriod', verbose_name='period')),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discounts', to='leprikon.CourseRegistration', verbose_name='registration')),
            ],
            options={
                'ordering': ('period',),
                'verbose_name': 'course discount',
                'verbose_name_plural': 'course discounts',
            },
        ),
        migrations.CreateModel(
            name='CourseRegistrationHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField()),
                ('end', models.DateField(default=None, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations_history', to='leprikon.Course', verbose_name='course')),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_history', to='leprikon.CourseRegistration', verbose_name='course')),
            ],
            options={
                'ordering': ('start',),
            },
        ),
        migrations.CreateModel(
            name='CourseRegistrationRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='time of request')),
                ('contact', models.CharField(help_text='Enter phone number, e-mail address or other contact.', max_length=150, verbose_name='contact')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_requests', to='leprikon.Course', verbose_name='course')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='course_registration_requests', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'ordering': ('created',),
                'verbose_name': 'course registration request',
                'verbose_name_plural': 'course registration requests',
            },
        ),
        migrations.CreateModel(
            name='CourseTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', leprikon.models.fields.DayOfWeekField(choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], verbose_name='day of week')),
                ('start', models.TimeField(blank=True, null=True, verbose_name='start time')),
                ('end', models.TimeField(blank=True, null=True, verbose_name='end time')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='times', to='leprikon.Course', verbose_name='course')),
            ],
            options={
                'ordering': ('day_of_week', 'start'),
                'verbose_name': 'time',
                'verbose_name_plural': 'times',
            },
            bases=(leprikon.models.startend.StartEndMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CourseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('slug', models.SlugField()),
                ('order', models.IntegerField(blank=True, default=0, verbose_name='order')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'course type',
                'verbose_name_plural': 'course types',
            },
        ),
        migrations.CreateModel(
            name='CourseTypeAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(blank=True, default=0, verbose_name='order')),
                ('course_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='leprikon.CourseType', verbose_name='course type')),
                ('file', filer.fields.file.FilerFileField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='filer.File')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'attachment',
                'verbose_name_plural': 'attachments',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('description', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='', verbose_name='description')),
                ('start_date', models.DateField(verbose_name='start date')),
                ('end_date', models.DateField(verbose_name='end date')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='start time')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='end time')),
                ('price', leprikon.models.fields.PriceField(blank=True, decimal_places=0, max_digits=10, null=True, verbose_name='price')),
                ('public', models.BooleanField(default=False, verbose_name='public')),
                ('reg_active', models.BooleanField(default=False, verbose_name='active registration')),
                ('min_count', models.IntegerField(blank=True, null=True, verbose_name='minimal count')),
                ('max_count', models.IntegerField(blank=True, null=True, verbose_name='maximal count')),
                ('risks', djangocms_text_ckeditor.fields.HTMLField(blank=True, verbose_name='risks')),
                ('plan', djangocms_text_ckeditor.fields.HTMLField(blank=True, verbose_name='plan')),
                ('evaluation', djangocms_text_ckeditor.fields.HTMLField(blank=True, verbose_name='evaluation')),
                ('note', models.CharField(blank=True, default='', max_length=300, verbose_name='note')),
                ('age_groups', models.ManyToManyField(blank=True, related_name='events', to='leprikon.AgeGroup', verbose_name='age groups')),
            ],
            options={
                'ordering': ('start_date', 'start_time'),
                'verbose_name': 'event',
                'verbose_name_plural': 'events',
            },
        ),
        migrations.CreateModel(
            name='EventAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(blank=True, default=0, verbose_name='order')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='leprikon.Event', verbose_name='event')),
                ('file', filer.fields.file.FilerFileField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='filer.File')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'attachment',
                'verbose_name_plural': 'attachments',
            },
        ),
        migrations.CreateModel(
            name='EventGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('plural', models.CharField(max_length=150, verbose_name='plural')),
                ('color', leprikon.models.fields.ColorField(max_length=10, verbose_name='color')),
                ('order', models.IntegerField(blank=True, default=0, verbose_name='order')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'event group',
                'verbose_name_plural': 'event groups',
            },
        ),
        migrations.CreateModel(
            name='EventListPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='leprikon_eventlistplugin', serialize=False, to='cms.CMSPlugin')),
                ('template', models.CharField(choices=[('default', 'Default'), ('grouped', 'Grouped by event groups')], default='default', help_text='The template used to render plugin.', max_length=100, verbose_name='template')),
                ('age_groups', models.ManyToManyField(blank=True, help_text='Keep empty to skip searching by age groups.', to='leprikon.AgeGroup', verbose_name='age groups')),
            ],
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='EventPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='payment date')),
                ('amount', leprikon.models.fields.PriceField(decimal_places=0, max_digits=10, verbose_name='amount')),
            ],
            options={
                'verbose_name': 'event payment',
                'verbose_name_plural': 'event payments',
            },
        ),
        migrations.CreateModel(
            name='EventPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='leprikon_eventplugin', serialize=False, to='cms.CMSPlugin')),
                ('template', models.CharField(choices=[('default', 'Default')], default='default', help_text='The template used to render plugin.', max_length=100, verbose_name='template')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leprikon.Event', verbose_name='event')),
            ],
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(editable=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='time of registration')),
                ('price', leprikon.models.fields.PriceField(decimal_places=0, editable=False, max_digits=10, verbose_name='price')),
                ('answers', models.TextField(blank=True, default='{}', editable=False, verbose_name='additional answers')),
                ('cancel_request', models.BooleanField(default=False, verbose_name='cancel request')),
                ('canceled', models.DateField(blank=True, null=True, verbose_name='date of cancellation')),
                ('participant_gender', models.CharField(choices=[('m', 'male'), ('f', 'female')], editable=False, max_length=1, verbose_name='gender')),
                ('participant_first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('participant_last_name', models.CharField(max_length=30, verbose_name='last name')),
                ('participant_birth_num', leprikon.models.fields.BirthNumberField(verbose_name='birth number')),
                ('participant_street', models.CharField(max_length=150, verbose_name='street')),
                ('participant_city', models.CharField(max_length=150, verbose_name='city')),
                ('participant_postal_code', leprikon.models.fields.PostalCodeField(verbose_name='postal code')),
                ('participant_citizenship', django_countries.fields.CountryField(max_length=2, verbose_name='citizenship')),
                ('participant_phone', models.CharField(blank=True, default='', max_length=30, verbose_name='phone')),
                ('participant_email', models.EmailField(blank=True, default='', max_length=254, verbose_name='email address')),
                ('participant_school_other', models.CharField(blank=True, default='', max_length=150, verbose_name='other school')),
                ('participant_school_class', models.CharField(blank=True, default='', max_length=30, verbose_name='class')),
                ('participant_health', models.TextField(blank=True, default='', verbose_name='health')),
                ('has_parent1', models.BooleanField(default=False, verbose_name='first parent')),
                ('parent1_first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='first name')),
                ('parent1_last_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='last name')),
                ('parent1_street', models.CharField(blank=True, max_length=150, null=True, verbose_name='street')),
                ('parent1_city', models.CharField(blank=True, max_length=150, null=True, verbose_name='city')),
                ('parent1_postal_code', leprikon.models.fields.PostalCodeField(blank=True, null=True, verbose_name='postal code')),
                ('parent1_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='phone')),
                ('parent1_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address')),
                ('has_parent2', models.BooleanField(default=False, verbose_name='second parent')),
                ('parent2_first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='first name')),
                ('parent2_last_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='last name')),
                ('parent2_street', models.CharField(blank=True, max_length=150, null=True, verbose_name='street')),
                ('parent2_city', models.CharField(blank=True, max_length=150, null=True, verbose_name='city')),
                ('parent2_postal_code', leprikon.models.fields.PostalCodeField(blank=True, null=True, verbose_name='postal code')),
                ('parent2_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='phone')),
                ('parent2_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address')),
                ('discount', leprikon.models.fields.PriceField(decimal_places=0, default=0, max_digits=10, verbose_name='discount')),
                ('explanation', models.TextField(blank=True, default='', verbose_name='discount explanation')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='leprikon.Event', verbose_name='event')),
                ('participant_age_group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='leprikon.AgeGroup', verbose_name='age group')),
            ],
            options={
                'verbose_name': 'event registration',
                'verbose_name_plural': 'event registrations',
            },
        ),
        migrations.CreateModel(
            name='EventRegistrationRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='time of request')),
                ('contact', models.CharField(help_text='Enter phone number, e-mail address or other contact.', max_length=150, verbose_name='contact')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_requests', to='leprikon.Event', verbose_name='event')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_registration_requests', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'ordering': ('created',),
                'verbose_name': 'event registration request',
                'verbose_name_plural': 'event registration requests',
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('slug', models.SlugField()),
                ('order', models.IntegerField(blank=True, default=0, verbose_name='order')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'event type',
                'verbose_name_plural': 'event types',
            },
        ),
        migrations.CreateModel(
            name='EventTypeAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(blank=True, default=0, verbose_name='order')),
                ('event_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='leprikon.EventType', verbose_name='event type')),
                ('file', filer.fields.file.FilerFileField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='filer.File')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'attachment',
                'verbose_name_plural': 'attachments',
            },
        ),
        migrations.CreateModel(
            name='FilteredCourseListPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='leprikon_filteredcourselistplugin', serialize=False, to='cms.CMSPlugin')),
                ('course_types', models.ManyToManyField(to='leprikon.CourseType', verbose_name='course type')),
            ],
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='FilteredEventListPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='leprikon_filteredeventlistplugin', serialize=False, to='cms.CMSPlugin')),
                ('event_types', models.ManyToManyField(to='leprikon.EventType', verbose_name='event type')),
            ],
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='FilteredLeaderListPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='leprikon_filteredleaderlistplugin', serialize=False, to='cms.CMSPlugin')),
            ],
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='Insurance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True, verbose_name='code')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
            ],
            options={
                'ordering': ('code',),
                'verbose_name': 'insurance company',
                'verbose_name_plural': 'insurance companies',
            },
        ),
        migrations.CreateModel(
            name='Leader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='', verbose_name='description')),
                ('page', cms.models.fields.PageField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cms.Page', verbose_name='page')),
                ('photo', filer.fields.image.FilerImageField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='filer.Image', verbose_name='photo')),
            ],
            options={
                'ordering': ('user__first_name', 'user__last_name'),
                'verbose_name': 'leader',
                'verbose_name_plural': 'leaders',
            },
        ),
        migrations.CreateModel(
            name='LeaderListPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='leprikon_leaderlistplugin', serialize=False, to='cms.CMSPlugin')),
                ('template', models.CharField(choices=[('default', 'Default')], default='default', help_text='The template used to render plugin.', max_length=100, verbose_name='template')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='leprikon.Course', verbose_name='course')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='leprikon.Event', verbose_name='event')),
            ],
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='LeaderPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='leprikon_leaderplugin', serialize=False, to='cms.CMSPlugin')),
                ('template', models.CharField(choices=[('default', 'Default')], default='default', help_text='The template used to render plugin.', max_length=100, verbose_name='template')),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leprikon.Leader', verbose_name='leader')),
            ],
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('subject', models.CharField(max_length=150, verbose_name='subject')),
                ('text', djangocms_text_ckeditor.fields.HTMLField(default='', verbose_name='text')),
            ],
            options={
                'ordering': ('-created',),
                'verbose_name': 'message',
                'verbose_name_plural': 'messages',
            },
        ),
        migrations.CreateModel(
            name='MessageAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', filer.fields.file.FilerFileField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='filer.File')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='leprikon.Message', verbose_name='message')),
            ],
            options={
                'verbose_name': 'attachment',
                'verbose_name_plural': 'attachments',
            },
        ),
        migrations.CreateModel(
            name='MessageRecipient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(editable=False)),
                ('sent', models.DateTimeField(auto_now_add=True, verbose_name='sent')),
                ('viewed', models.DateTimeField(default=None, editable=False, null=True, verbose_name='viewed on site')),
                ('sent_mail', models.DateTimeField(default=None, editable=False, null=True, verbose_name='sent by email')),
                ('message', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='recipients', to='leprikon.Message', verbose_name='message')),
                ('recipient', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='leprikon_messages', to=settings.AUTH_USER_MODEL, verbose_name='recipient')),
            ],
            options={
                'ordering': ('sent',),
                'verbose_name': 'recipient',
                'verbose_name_plural': 'recipients',
            },
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=30, verbose_name='last name')),
                ('street', models.CharField(max_length=150, verbose_name='street')),
                ('city', models.CharField(max_length=150, verbose_name='city')),
                ('postal_code', leprikon.models.fields.PostalCodeField(verbose_name='postal code')),
                ('email', models.EmailField(blank=True, default='', max_length=254, verbose_name='email address')),
                ('phone', models.CharField(max_length=30, verbose_name='phone')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leprikon_parents', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'parent',
                'verbose_name_plural': 'parents',
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=30, verbose_name='last name')),
                ('birth_num', leprikon.models.fields.BirthNumberField(verbose_name='birth number')),
                ('street', models.CharField(max_length=150, verbose_name='street')),
                ('city', models.CharField(max_length=150, verbose_name='city')),
                ('postal_code', leprikon.models.fields.PostalCodeField(verbose_name='postal code')),
                ('email', models.EmailField(blank=True, default='', max_length=254, verbose_name='email address')),
                ('phone', models.CharField(blank=True, default='', max_length=30, verbose_name='phone')),
                ('citizenship', django_countries.fields.CountryField(max_length=2, verbose_name='citizenship')),
                ('school_other', models.CharField(blank=True, default='', max_length=150, verbose_name='other school')),
                ('school_class', models.CharField(blank=True, default='', max_length=30, verbose_name='class')),
                ('health', models.TextField(blank=True, default='', verbose_name='health')),
                ('gender', models.CharField(choices=[('m', 'male'), ('f', 'female')], editable=False, max_length=1, verbose_name='gender')),
                ('age_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='leprikon.AgeGroup', verbose_name='age group')),
                ('insurance', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='leprikon.Insurance', verbose_name='insurance')),
            ],
            options={
                'verbose_name': 'participant',
                'verbose_name_plural': 'participants',
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('place', models.CharField(blank=True, default='', max_length=50, verbose_name='place')),
            ],
            options={
                'ordering': ('place',),
                'verbose_name': 'place',
                'verbose_name_plural': 'places',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='name')),
                ('question', models.CharField(max_length=50, verbose_name='question')),
                ('help_text', models.TextField(blank=True, help_text='This is help text. The help text is shown next to the form field.', null=True, verbose_name='help text')),
                ('field', models.CharField(choices=[('char', 'char field'), ('text', 'text field'), ('boolean', 'boolean field'), ('date', 'date field'), ('choice', 'choice field')], max_length=150, verbose_name='field')),
                ('field_args', models.TextField(blank=True, default='{}', help_text='Enter valid JSON structure representing field configuration.', verbose_name='field_args')),
            ],
            options={
                'verbose_name': 'additional question',
                'verbose_name_plural': 'additional questions',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('street', models.CharField(blank=True, default='', max_length=50, verbose_name='street')),
                ('city', models.CharField(blank=True, default='', max_length=50, verbose_name='city')),
            ],
            options={
                'ordering': ('city', 'name'),
                'verbose_name': 'school',
                'verbose_name_plural': 'schools',
            },
        ),
        migrations.CreateModel(
            name='SchoolYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(unique=True, verbose_name='year')),
                ('active', models.BooleanField(default=False, verbose_name='active')),
            ],
            options={
                'ordering': ('-year',),
                'verbose_name': 'school year',
                'verbose_name_plural': 'school years',
            },
        ),
        migrations.CreateModel(
            name='Timesheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted', models.BooleanField(default=False, verbose_name='submitted')),
                ('paid', models.BooleanField(default=False, verbose_name='paid')),
                ('leader', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='timesheets', to='leprikon.Leader', verbose_name='leader')),
            ],
            options={
                'ordering': ('-period__start',),
                'verbose_name': 'timesheet',
                'verbose_name_plural': 'timesheets',
            },
        ),
        migrations.CreateModel(
            name='TimesheetEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='date')),
                ('start', models.TimeField(verbose_name='start time')),
                ('end', models.TimeField(verbose_name='end time')),
                ('description', djangocms_text_ckeditor.fields.HTMLField(verbose_name='work description')),
            ],
            options={
                'ordering': ('start',),
                'verbose_name': 'timesheet entry',
                'verbose_name_plural': 'timesheet entries',
            },
            bases=(leprikon.models.startend.StartEndMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TimesheetEntryType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('order', models.IntegerField(blank=True, default=0, verbose_name='order')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'timesheet entry type',
                'verbose_name_plural': 'timesheet entry types',
            },
        ),
        migrations.CreateModel(
            name='TimesheetPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField(editable=False, unique=True, verbose_name='start date')),
                ('end', models.DateField(editable=False, unique=True, verbose_name='end date')),
            ],
            options={
                'ordering': ('-start',),
                'verbose_name': 'timesheet period',
                'verbose_name_plural': 'timesheet periods',
            },
            bases=(leprikon.models.startend.StartEndMixin, models.Model),
        ),
        migrations.AddField(
            model_name='timesheetentry',
            name='entry_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='leprikon.TimesheetEntryType', verbose_name='entry type'),
        ),
        migrations.AddField(
            model_name='timesheetentry',
            name='timesheet',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='timesheet_entries', to='leprikon.Timesheet', verbose_name='timesheet'),
        ),
        migrations.AddField(
            model_name='timesheet',
            name='period',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='timesheets', to='leprikon.TimesheetPeriod', verbose_name='period'),
        ),
        migrations.AddField(
            model_name='participant',
            name='school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='leprikon.School', verbose_name='school'),
        ),
        migrations.AddField(
            model_name='participant',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leprikon_participants', to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AddField(
            model_name='leaderlistplugin',
            name='school_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='leprikon.SchoolYear', verbose_name='school year'),
        ),
        migrations.AddField(
            model_name='leader',
            name='school_years',
            field=models.ManyToManyField(related_name='leaders', to='leprikon.SchoolYear', verbose_name='school years'),
        ),
        migrations.AddField(
            model_name='leader',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='leprikon_leader', to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AddField(
            model_name='filteredleaderlistplugin',
            name='school_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='leprikon.SchoolYear', verbose_name='school year'),
        ),
        migrations.AddField(
            model_name='filteredeventlistplugin',
            name='school_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='leprikon.SchoolYear', verbose_name='school year'),
        ),
        migrations.AddField(
            model_name='filteredcourselistplugin',
            name='school_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='leprikon.SchoolYear', verbose_name='school year'),
        ),
        migrations.AddField(
            model_name='eventtype',
            name='questions',
            field=models.ManyToManyField(blank=True, help_text='Add additional questions to be asked in the registration form.', to='leprikon.Question', verbose_name='additional questions'),
        ),
        migrations.AddField(
            model_name='eventregistration',
            name='participant_insurance',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='leprikon.Insurance', verbose_name='insurance'),
        ),
        migrations.AddField(
            model_name='eventregistration',
            name='participant_school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='leprikon.School', verbose_name='school'),
        ),
        migrations.AddField(
            model_name='eventregistration',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='leprikon_eventregistrations', to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AddField(
            model_name='eventpayment',
            name='registration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='leprikon.EventRegistration', verbose_name='registration'),
        ),
        migrations.AddField(
            model_name='eventlistplugin',
            name='event_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leprikon.EventType', verbose_name='event type'),
        ),
        migrations.AddField(
            model_name='eventlistplugin',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='Keep empty to skip searching by groups.', to='leprikon.EventGroup', verbose_name='event groups'),
        ),
        migrations.AddField(
            model_name='eventlistplugin',
            name='leaders',
            field=models.ManyToManyField(blank=True, help_text='Keep empty to skip searching by leaders.', to='leprikon.Leader', verbose_name='leaders'),
        ),
        migrations.AddField(
            model_name='eventlistplugin',
            name='school_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='leprikon.SchoolYear', verbose_name='school year'),
        ),
        migrations.AddField(
            model_name='event',
            name='event_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='leprikon.EventType', verbose_name='event type'),
        ),
        migrations.AddField(
            model_name='event',
            name='groups',
            field=models.ManyToManyField(related_name='events', to='leprikon.EventGroup', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='event',
            name='leaders',
            field=models.ManyToManyField(blank=True, related_name='events', to='leprikon.Leader', verbose_name='leaders'),
        ),
        migrations.AddField(
            model_name='event',
            name='page',
            field=cms.models.fields.PageField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cms.Page', verbose_name='page'),
        ),
        migrations.AddField(
            model_name='event',
            name='photo',
            field=filer.fields.image.FilerImageField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='filer.Image', verbose_name='photo'),
        ),
        migrations.AddField(
            model_name='event',
            name='place',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='leprikon.Place', verbose_name='place'),
        ),
        migrations.AddField(
            model_name='event',
            name='questions',
            field=models.ManyToManyField(blank=True, help_text='Add additional questions to be asked in the registration form.', to='leprikon.Question', verbose_name='additional questions'),
        ),
        migrations.AddField(
            model_name='event',
            name='school_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='leprikon.SchoolYear', verbose_name='school year'),
        ),
        migrations.AddField(
            model_name='coursetype',
            name='questions',
            field=models.ManyToManyField(blank=True, help_text='Add additional questions to be asked in the registration form.', to='leprikon.Question', verbose_name='additional questions'),
        ),
        migrations.AddField(
            model_name='courseregistration',
            name='participant_insurance',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='leprikon.Insurance', verbose_name='insurance'),
        ),
        migrations.AddField(
            model_name='courseregistration',
            name='participant_school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='leprikon.School', verbose_name='school'),
        ),
        migrations.AddField(
            model_name='courseregistration',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='leprikon_courseregistrations', to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AddField(
            model_name='coursepayment',
            name='registration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='leprikon.CourseRegistration', verbose_name='registration'),
        ),
        migrations.AddField(
            model_name='courselistplugin',
            name='course_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leprikon.CourseType', verbose_name='course type'),
        ),
        migrations.AddField(
            model_name='courselistplugin',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='Keep empty to skip searching by groups.', to='leprikon.CourseGroup', verbose_name='course groups'),
        ),
        migrations.AddField(
            model_name='courselistplugin',
            name='leaders',
            field=models.ManyToManyField(blank=True, help_text='Keep empty to skip searching by leaders.', to='leprikon.Leader', verbose_name='leaders'),
        ),
        migrations.AddField(
            model_name='courselistplugin',
            name='school_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='leprikon.SchoolYear', verbose_name='school year'),
        ),
        migrations.AddField(
            model_name='coursejournalleaderentry',
            name='timesheet',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='course_entries', to='leprikon.Timesheet', verbose_name='timesheet'),
        ),
        migrations.AddField(
            model_name='coursejournalentry',
            name='registrations',
            field=models.ManyToManyField(blank=True, related_name='journal_entries', to='leprikon.CourseRegistration', verbose_name='participants'),
        ),
        migrations.AddField(
            model_name='course',
            name='course_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='leprikon.CourseType', verbose_name='course type'),
        ),
        migrations.AddField(
            model_name='course',
            name='groups',
            field=models.ManyToManyField(related_name='courses', to='leprikon.CourseGroup', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='course',
            name='leaders',
            field=models.ManyToManyField(blank=True, related_name='courses', to='leprikon.Leader', verbose_name='leaders'),
        ),
        migrations.AddField(
            model_name='course',
            name='page',
            field=cms.models.fields.PageField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cms.Page', verbose_name='page'),
        ),
        migrations.AddField(
            model_name='course',
            name='photo',
            field=filer.fields.image.FilerImageField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='filer.Image', verbose_name='photo'),
        ),
        migrations.AddField(
            model_name='course',
            name='place',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses', to='leprikon.Place', verbose_name='place'),
        ),
        migrations.AddField(
            model_name='course',
            name='questions',
            field=models.ManyToManyField(blank=True, help_text='Add additional questions to be asked in the registration form.', to='leprikon.Question', verbose_name='additional questions'),
        ),
        migrations.AddField(
            model_name='course',
            name='school_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='leprikon.SchoolYear', verbose_name='school year'),
        ),
        migrations.AddField(
            model_name='contact',
            name='leader',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='leprikon.Leader', verbose_name='leader'),
        ),
        migrations.AlterUniqueTogether(
            name='timesheet',
            unique_together=set([('period', 'leader')]),
        ),
        migrations.AlterUniqueTogether(
            name='participant',
            unique_together=set([('user', 'birth_num')]),
        ),
        migrations.AlterUniqueTogether(
            name='messagerecipient',
            unique_together=set([('message', 'recipient')]),
        ),
        migrations.AlterUniqueTogether(
            name='eventregistrationrequest',
            unique_together=set([('user', 'event')]),
        ),
        migrations.AlterUniqueTogether(
            name='eventregistration',
            unique_together=set([('event', 'participant_birth_num')]),
        ),
        migrations.AlterUniqueTogether(
            name='courseregistrationrequest',
            unique_together=set([('user', 'course')]),
        ),
        migrations.AlterUniqueTogether(
            name='courseregistrationdiscount',
            unique_together=set([('registration', 'period')]),
        ),
        migrations.AlterUniqueTogether(
            name='courseregistration',
            unique_together=set([('course', 'participant_birth_num')]),
        ),
        migrations.AlterUniqueTogether(
            name='coursejournalleaderentry',
            unique_together=set([('course_entry', 'timesheet')]),
        ),
    ]
